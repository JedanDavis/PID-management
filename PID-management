#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/stat.h>
#include <stdbool.h>
#include <errno.h>

typedef struct node
{
    unsigned long PID;
    struct node *next;
} node;

typedef struct queue
{
    node *head;
    node *tail;

} queue;

typedef struct pqueue
{
    unsigned long priority;
    queue *head;
    int count;
    struct pqueue *left;
    struct pqueue *right;
} pqueue;

// GLOBAL VARIABLES
static struct pqueue *root = NULL;

struct pqueue *createnode(unsigned long priority)
{
    pqueue *newnode = (pqueue *)malloc(sizeof(pqueue));

    if (newnode == NULL)
    {
        errno = ENOMEM;
        perror("Error: Memory allocation failed");
    }
    else
    {
        newnode->priority = priority;
        newnode->left = NULL;
        newnode->right = NULL;
        newnode->head = NULL;
        newnode->count = 0;
    }

    return newnode;
}

bool insert(pqueue **root, unsigned long priority)
{
    if (*root == NULL)
    {
        *root = createnode(priority);
        return true;
    }
    else if (priority < (*root)->priority)
    {
        if ((*root)->left == NULL)
        {
            (*root)->left = createnode(priority);
        }
        else
        {
            insert(&(*root)->left, priority);
        }
    }
    else if (priority > (*root)->priority)
    {
        if ((*root)->right == NULL)
        {
            (*root)->right = createnode(priority);
        }
        else
        {
            insert(&(*root)->right, priority);
        }
    }

    return false;
}

long pqueue_init()
{
    root = NULL;
    return 0;
}

pqueue *search(pqueue *root, unsigned long nodepriority)
{
    if (root == NULL)
    {
        return NULL;
    }
    else if (root->priority == nodepriority)
    {
        return root;
    }
    else if (nodepriority < root->priority)
    {
        return search(root->left, nodepriority);
    }
    else
    {
        return search(root->right, nodepriority);
    }
}

void deleteNode(pqueue **root, unsigned long key)
{
    pqueue *check = search(*root, key);
    if (check->head != NULL)
    {
        errno = EPERM;
        perror("Error: Permission Denied Queue is not empty\n");
        return;
    }

    if (key < (*root)->priority)
        deleteNode(&((*root)->left), key);
    else if (key > (*root)->priority)
        deleteNode(&((*root)->right), key);
    else
    {
        if ((*root)->left == NULL)
        {
            pqueue *temp = (*root)->right;
            free(*root);
            *root = temp;
        }
        else if ((*root)->right == NULL)
        {
            pqueue *temp = (*root)->left;
            free(*root);
            *root = temp;
        }
        else
        {
            pqueue *temp = (*root)->right;
            while (temp->left != NULL)
            {
                temp = temp->left;
            }
            (*root)->priority = temp->priority;
            deleteNode(&((*root)->right), temp->priority);
        }
    }
}

void dequeue(pqueue *root, queue *q)
{
    if (q->head == NULL)
    {
        errno = ESRCH;
        perror("Error: Queue is empty");
    }
    else
    {
        node *temp = q->head;
        q->head = q->head->next;
        root->count--;

        free(temp);
    }
}

long pqueue_create(unsigned long priority)
{
    pqueue *check = search(root, priority);
    if (check != NULL)
    {
        errno = EEXIST;
        perror("Error: Priority already exists\n");
        return errno;
    }
    else
    {
        insert(&root, priority);
    }
    return 0;
}

long pqueue_send(unsigned long priority, unsigned long PID)
{
    node *newnode = malloc(sizeof(node));

    if (newnode == NULL)
    {
        errno = ENOMEM;
        perror("Error: Memory allocation failed for new node");
        return errno;
    }

    newnode->PID = PID;
    newnode->next = NULL;

    pqueue *w = search(root, priority);
    if (w == NULL)
    {
        pqueue_create(priority);
        w = search(root, priority);
    }

    queue *q = w->head;

    if (q == NULL)
    {
        q = malloc(sizeof(queue));

        if (q == NULL)
        {
            errno = ENOMEM;
            perror("Error: Memory allocation failed for new queue");
            free(newnode);
            return errno;
        }

        q->head = newnode;
        q->tail = newnode;
        w->head = q;
        w->count++;
    }
    else
    {
        node *temp = q->head;

        while (temp != NULL)
        {
            if (temp->PID == PID)
            {
                errno = EEXIST;
                perror("Error: PID already exists in queue\n");
                free(newnode);
                return errno;
            }
            temp = temp->next;
        }

        q->tail->next = newnode;
        q->tail = newnode;
        w->count++;
    }

    return 0;
}

long pqueue_recv(unsigned long priority)
{
    pqueue *w = search(root, priority);
    if (w == NULL)
    {
        errno = ENOENT;
        perror("Priority not found in tree\n");
        return errno;
    }
    queue *q = w->head;
    if (q == NULL)
    {
        errno = ESRCH;
        perror("Queue is empty\n");
        return errno;
    }
    node *temp = q->head;
    printf("first in the queue is: %lu\n", temp->PID);
    return 0;
}

long pqueue_delete(unsigned long priority)
{
    pqueue *w = search(root, priority);
    if (w == NULL)
    {
        errno = ENOENT;
        perror("Priority not found in tree\n");
        return errno;
    }
    queue *nodequeue = w->head;
    if (nodequeue == NULL)
    {
        deleteNode(&root, priority);
        return 0;
    }
    node *temp = nodequeue->head;
    printf("first in the queue is: %lu\n", temp->PID);
    dequeue(w, nodequeue);
    return 0;
}

long pqueue_destroy(unsigned long priority)
{
    pqueue *w = search(root, priority);
    if (w == NULL)
    {
        errno = ENOENT;
        perror("Priority not found in tree\n");
        return errno;
    }
    queue *nodequeue = w->head;
    if (nodequeue == NULL)
    {
        deleteNode(&root, priority);
        return 0;
    }
    node *temp = nodequeue->head;
    while (temp != NULL)
    {
        node *next = temp->next;
        free(temp);
        temp = next;
    }
    free(nodequeue);

    w->head = NULL;
    w->count = 0;
    deleteNode(&root, priority);
    return 0;
}

long pqueue_shutdown()
{
    while (root != NULL)
    {
        printf("deleting priority %lu\n", root->priority);
        pqueue_destroy(root->priority);
    }
    return 0;
}

long pqueue_count(unsigned long priority)
{
    pqueue *w = search(root, priority);
    if (w == NULL)
    {
        errno = ENOENT;
        printf("Priority not found in tree\n");
        return errno;
    }
    else
    {
        printf("the number of nodes in the queue is %d\n", w->count);
        return 0;
    }
}

void printBST(pqueue *root)
{
    if (root != NULL)
    {
        printBST(root->left);
        printf("%lu ", root->priority);
        printBST(root->right);
        printf("\n");
    }
}

void printQueue(pqueue *root2, unsigned long priority)
{
    pqueue *root = search(root2, priority);
    if (root == NULL)
    {
        printf("Priority not found in tree\n");
        return;
    }

    queue *q = root->head;

    printf("the queue attached to priority %lu is ", priority);
    if (q == NULL)
    {
        printf("empty");
    }
    else
    {
        node *temp = q->head;
        while (temp != NULL)
        {
            printf("%lu->", temp->PID);
            temp = temp->next;
        }
    }
    printf("\n");
}

int main()
{
    // Testing all functions that start with pqueue_
    pqueue_create(1);
    pqueue_create(2);
    pqueue_create(3);
    pqueue_create(4);
    pqueue_create(5);

    printBST(root);

    pqueue_send(1, 1);
    pqueue_send(1, 2);
    pqueue_send(1, 3);
    pqueue_send(1, 4);

    printQueue(root, 1);

    pqueue_send(2, 5);
    pqueue_send(2, 6);
    pqueue_send(2, 7);

    printQueue(root, 2);

    pqueue_send(3, 8);
    pqueue_send(3, 9);
    pqueue_send(3, 10);

    printQueue(root, 3);

    pqueue_recv(1);
    pqueue_recv(2);
    pqueue_recv(3);

    pqueue_delete(1);

    printQueue(root, 1);

    pqueue_delete(2);

    printQueue(root, 2);

    pqueue_delete(3);

    printQueue(root, 3);

    pqueue_count(1);
    pqueue_count(2);
    pqueue_count(3);

    pqueue_destroy(1);
    pqueue_destroy(2);
    pqueue_destroy(3);

    pqueue_shutdown();

    return 0;
}
